<?php

namespace Stuzzo\Monolog\Processor;

use FOS\UserBundle\Model\UserInterface;
use Monolog\Processor\WebProcessor;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage;
use Symfony\Component\HttpKernel\Event\GetResponseEvent;

/**
 * Add Request data to the record generated by logger
 *
 * @author Alfredo Aiello <stuzzo@gmail.com>
 */
class SlackProcessor
{
	/** @var TokenStorage */
	private $tokenStorage;
	
	/** @var UserInterface  */
	private $user;
	
	public function __construct(TokenStorage $tokenStorage)
	{
		$this->tokenStorage = $tokenStorage;
	}
	
	public function __invoke(array $record)
	{
		foreach ($record['context'] as $key => $val) {
			if (!($val instanceof \Exception)) {
				continue;
			}
			
			$record['message'] = sprintf(
				'Uncaught PHP Exception %s %s at %s line %s',
				get_class($val),
				$val->getMessage(),
				$val->getFile(),
				$val->getLine()
			);
			
			$record['extra'] = ['Stack Trace' => sprintf(
				'%s',
				$val->getTraceAsString()
			)];
			
			unset($record['context'][$key]);
		}
		
		$record = $this->addRequestData($record);
		
		return $record;
	}
	
	private function addRequestData($record)
	{
		$request = isset($GLOBALS['request']) ? $GLOBALS['request'] : '';
		if (empty($request)) {
			return $record;
		}
		
		if ($request instanceof Request) {
			return $this->addSymfonyRequestData($request, $record);
		}
		
		/*
		 * Here you can add other request classes
		 */
	}
	
	protected function addSymfonyRequestData(Request $request, $record)
	{
		
		$record['extra']['Server'] = $_SERVER['SERVER_ADDR'];
		$record['extra']['Method'] = $request->getMethod();
		$record['extra']['Url'] = $request->getUri();
		
		if (null !== $this->user) {
			$record['extra']['User'] = sprintf('%s %s', $this->user->getUsername(), json_encode($this->user->getRoles()));
		}
		
		return $record;
	}
	
	public function onKernelRequest(GetResponseEvent $event)
	{
		$postParams = $event->getRequest()->request->all();
		if(false === empty($postParams)){
			$this->postParams = serialize($postParams);
		}
		
		if (null === $token = $this->tokenStorage->getToken()) {
			return;
		}
		
		if (!is_object($user = $token->getUser())) {
			// e.g. anonymous authentication
			return;
		}
		
		$this->user = $user;
	}
	
}
